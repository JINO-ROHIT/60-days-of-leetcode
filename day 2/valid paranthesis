https://leetcode.com/problems/valid-parentheses/

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = []
        dict = {"]":"[", "}":"{", ")":"("}
        for char in s:
            if char in dict.values():
                stack.append(char)
            elif char in dict.keys():
                if stack == [] or dict[char] != stack.pop():
                    return False
            else:
                return False
        return stack == []

1. make a dictionary of the possible bracket types
2. store one pattern on brackets in a stack
3. as soon as the other pattern of bracket shows up, pop the last element from stack and make comparisons
4. at the end, we know that if if the stack is empty, then no brackets of the type left and hence all checks passed
